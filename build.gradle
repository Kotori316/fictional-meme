import com.google.gson.Gson
import com.google.gson.JsonObject

import java.util.function.Predicate
import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath("com.google.code.gson:gson:2.8.6")
    }
}
apply plugin: 'net.minecraftforge.gradle'
version = '1.0'
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: getProperty("mapping.channel"), version: getProperty("mapping.version")
    runs {
        data {
            workingDirectory project.file('run')
            forceExit false
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            property "mixin.debug.export", "true"

            String mods = System.getenv("CI_MODS") ?: getProperty("ci.mods") ?: ""
            args '--mod', mods, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    maven {
        name = "Azure-Kotori316"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            includeModule("com.kotori316", "ModJar")
        }
    }
    repositories.stream().filter { it instanceof MavenArtifactRepository }.forEach { repo ->
        repo.content {
            excludeVersionByRegex(".*", ".*", ".*_mapped_snapshot_.*")
        }
    }
}

dependencies {
    String versionArg = System.getenv("CI_FORGE") ?: getProperty("forge.version")
    String forgeVersion = java.util.Optional.ofNullable(versionArg)
            .filter(Predicate.isEqual("default").negate())
            .filter { s -> !s.contains("latest") }
            .orElseGet({
                String key = versionArg == null || !versionArg.contains("latest") ? null : versionArg
                getLatestForge(key, getForgeVersionList())
            })
    String forgeArtifact = forgeVersion.startsWith("net.minecraftforge:forge:") ? forgeVersion : "net.minecraftforge:forge:$forgeVersion"

    minecraft(forgeArtifact)

    def scala_version = "2.13.5"
    implementation "org.scala-lang:scala-library:${scala_version}"
    // A library of functional programing in Scala
    implementation group: 'org.typelevel', name: "cats-core_" + scala_version.substring(0, scala_version.lastIndexOf(".")), version: '2.6.0'

    implementation(group: 'com.kotori316', name: 'ScalableCatsForce'.toLowerCase(Locale.ROOT), version: '2.13.5-build-2', classifier: 'dev')

    String JUPITER_VERSION = System.getenv("JUPITER_VERSION") ?: '5.7.0'
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    runtimeOnly(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')
    runtimeOnly(group: "com.kotori316", name: "ModJar", version: "2.0.1") {
        transitive(false)
    }
}

static JsonObject getForgeVersionList() {
    def target = "https://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json"
    def apiUrl = new URL(target)
    def inputStream = apiUrl.openStream()
    def gson = new Gson()
    return gson.fromJson(new InputStreamReader(inputStream), JsonObject.class).getAsJsonObject("promos")
}

static String getLatestForge(String key, JsonObject allList) {
    if (key == null || !allList.has(key)) {
        Pattern pattern = Pattern.compile("(1\\.(\\d+)(?:|\\.(\\d+)))-latest")
        final int versionPos = 1
        final int majorPos = 2
        final int minorPos = 3
        return allList.entrySet().stream()
                .map { e -> e.getKey() }
                .filter { s -> key == null || s.contains(key) }
                .map { s -> pattern.matcher(s) }
                .filter { m -> m.matches() }
                .map { m ->
                    int major = Integer.parseInt(m.group(majorPos))
                    int minor = m.group(minorPos) == null || m.group(minorPos).isEmpty() ? 0 : Integer.parseInt(m.group(minorPos))
                    return new AbstractMap.SimpleImmutableEntry<Integer, Matcher>(major * 100 + minor, m)
                }
                .sorted(Map.Entry.<Integer, Matcher> comparingByKey().reversed())
                .map { e -> e.getValue() }
                .findFirst()
                .map { k -> k.group(versionPos) + "-" + allList.get(k.group()).getAsString() }
                .orElse(null)
    } else {
        String prefix = key.split("-")[0]
        return prefix + "-" + allList.get(key).getAsString()
    }
}

task printForgeVersions() {
    doLast {
        def versions = [
                "1.15.1-latest",
                "1.16.4-latest",
                "1.16.4-recommended",
                "1.16.5-latest",
                "1.12.2-latest",
                "1.12.2-recommended",
                "1.12-latest",
                "1.8-latest",
                "1.7.2-latest",
                "1.7.10-latest",
                null,
                "1.7.10",
                "1.12.2",
                "1.16.2",
                "1.16.5",
        ]
        versions.sort(Comparator.nullsFirst(Comparator.naturalOrder()))
        def versionMap = getForgeVersionList()
        // println(versionMap.entrySet())
        for (String s : versions) {
            System.out.println("$s: ${getLatestForge(s, versionMap)}" as String)
        }
    }
}
